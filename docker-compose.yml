version: "3.9"

# This compose file starts the core infrastructure for the Personal Entertainment Knowledge Graph.
# It spins up Postgres (with pgvector), Neo4j Community, Redis, and optionally Ollama.
# Application containers (backend and frontend) can be added later.

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: pekg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  neo4j:
    image: neo4j:5-community
    container_name: pekg-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_server_default_listen_address: "0.0.0.0"
      NEO4J_server_default_advertised_address: "neo4j"
    ports:
      - "7474:7474"   # HTTP UI
      - "7687:7687"   # Bolt driver
    volumes:
      - neo4jdata:/data
      - neo4jlogs:/logs
      - neo4jimport:/var/lib/neo4j/import
      - neo4jplugins:/plugins
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7
    container_name: pekg-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  # Optional local LLM infrastructure. Start with: `docker compose --profile ollama up -d`
  ollama:
    image: ollama/ollama:latest
    container_name: pekg-ollama
    profiles: ["ollama"]
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      OLLAMA_KEEP_ALIVE: 24h
    volumes:
      - ollamadata:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:11434/api/tags > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

volumes:
  pgdata:
  neo4jdata:
  neo4jlogs:
  neo4jimport:
  neo4jplugins:
  redisdata:
  ollamadata:
