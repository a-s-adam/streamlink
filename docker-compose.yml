version: "3.9"

# Streamlink MVP - Personal Entertainment Knowledge Graph
# This compose file starts the complete application stack including infrastructure and application services

services:
  # Infrastructure Services
  postgres:
    image: pgvector/pgvector:pg16
    container_name: streamlink-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-streamlink}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-streamlink}"]
      interval: 5s
      timeout: 5s
      retries: 20

  neo4j:
    image: neo4j:5-community
    container_name: streamlink-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: "${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j}"
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_server_default_listen_address: "0.0.0.0"
      NEO4J_server_default_advertised_address: "neo4j"
    ports:
      - "7474:7474"   # HTTP UI
      - "7687:7687"   # Bolt driver
    volumes:
      - neo4jdata:/data
      - neo4jlogs:/logs
      - neo4jimport:/var/lib/neo4j/import
      - neo4jplugins:/plugins
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    profiles: ["neo4j"]

  redis:
    image: redis:7
    container_name: streamlink-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  # Optional local LLM infrastructure
  ollama:
    image: ollama/ollama:latest
    container_name: streamlink-ollama
    profiles: ["ollama"]
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      OLLAMA_KEEP_ALIVE: 24h
    volumes:
      - ollamadata:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:11434/api/tags > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Application Services
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: streamlink-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - TMDB_API_KEY=${TMDB_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDINGS_PROVIDER=${EMBEDDINGS_PROVIDER:-openai}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - MOCK_MODE=${MOCK_MODE:-false}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./samples:/app/samples
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: streamlink-worker
    restart: unless-stopped
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - TMDB_API_KEY=${TMDB_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMBEDDINGS_PROVIDER=${EMBEDDINGS_PROVIDER:-openai}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - MOCK_MODE=${MOCK_MODE:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./samples:/app/samples

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streamlink-web
    restart: unless-stopped
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - API_BASE_URL=${API_BASE_URL}
      - NODE_ENV=${NODE_ENV}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  pgdata:
  neo4jdata:
  neo4jlogs:
  neo4jimport:
  neo4jplugins:
  redisdata:
  ollamadata:
